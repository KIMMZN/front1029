JS
1.선언문 : VAR LET CONST
var, let 구분:scope 정리 할 것
const : 상수

var a =1     typeof  = number
var b = '1';    typeof = string
var a+b = 11


2.연산자 : ==

a == b          true 값 똑같으면
a === b        false 타입도 똑같아야됨



------------------
<body>
<input type = "text">
<input type = "text">
</body>
<scrpit>

var a = document.gett..tagnames('input')[0] [1]

</script>




id는 유니크 
class는 배열값 
tag/names 도 배열값

언어 공부할떄 선언문부터

JavaScript에서 var, let, const는 변수를 선언할 때 사용하는 키워드이며, 각각의 키워드는 스코프(scope)와 재할당 가능 여부에서 차이가 있습니다.

1. var
특징: JavaScript의 초기 버전부터 존재했던 변수 선언 방식입니다.
재할당 가능: 가능합니다.
스코프: 함수 스코프(function scope)를 가집니다.
즉, var로 선언된 변수는 함수 내부에서만 접근 가능합니다.
함수 외부에서 선언된 경우 전역 스코프(global scope)를 가지며, 코드 블록 내부에 선언되더라도 블록 밖에서도 접근 가능합니다. 이는 의도치 않은 버그를 발생시킬 수 있습니다.
호이스팅: var로 선언한 변수는 호이스팅되어, 선언 전에 접근할 수 있지만 undefined로 초기화됩니다.

설명 : 


2. let
특징: ES6(ES2015)부터 추가된 변수 선언 방식입니다.
재할당 가능: 가능합니다.
스코프: 블록 스코프(block scope)를 가집니다.
{}로 감싸진 코드 블록 내에서만 유효하며, 블록 외부에서는 접근할 수 없습니다.
호이스팅: let도 호이스팅되지만, 초기화되지 않으므로 선언 전에 접근할 수 없습니다. 이를 **"Temporal Dead Zone(TDZ)"**이라고 부릅니다.


3. const
특징: ES6부터 추가된 상수 선언 방식입니다.
재할당 불가: const로 선언된 변수는 값을 재할당할 수 없습니다.
그러나 객체나 배열과 같은 참조형 데이터는 변경할 수 있습니다. (const는 참조의 변경만 막음)
스코프: let과 동일하게 블록 스코프를 가집니다.
호이스팅: const도 호이스팅되지만, 선언 전에 접근할 수 없습니다 (TDZ 적용).

요약
키워드	재할당 가능 여부	스코프	호이스팅	TDZ 적용
var	가능	함수 스코프	예	없음
let	가능	블록 스코프	예	있음
const	불가능	블록 스코프	예	있음

Tip: 일반적으로 const를 우선 사용하고, 재할당이 필요한 경우에만 let을 사용하는 것이 좋습니다. var는 예기치 않은 스코프 문제를 일으킬 수 있으므로 잘 사용하지 않는 것이 권장됩니다.












